// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  EDITED
  ORIGINAL_ACCEPTED
  NOT_REVIEWED
  REJECTED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  salt          String?
  hash          String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  provider      String
  accounts      Account[]
  sessions      Session[]
  files         File[]

  @@map("users")
}

model File {
  id        String   @id @default(cuid())
  label     String?
  filename  String
  filePath  String
  tus       Tu[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("files")
}

model Tu {
  id                      String  @id @default(cuid())
  translationLiteralId    Int
  translationId           Int
  count                   Int
  fieldName               String
  shortFieldname          String
  srcLiteral              String  @db.Text
  translatedLiteral       String  @db.Text
  reviewLiteral           String? @db.Text
  sourceLanguage          String
  targetLanguage          String
  translationScorePercent Float

  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Status    Status   @default(NOT_REVIEWED)

  @@map("tus")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
